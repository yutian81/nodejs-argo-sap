name: 自动部署SG+US双区域节点到SAP

on:
  workflow_dispatch: 
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG  # 新加坡
          - US  # 美国
          - ALL # 新加坡+美国
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  DOCKER_IMAGE: ghcr.io/eooce/nodejs:main
  MEMORY: 256M
  DISK: 256M

jobs:
  # 新加坡区域的部署任务
  deploy_sg:
    if: github.event.inputs.region == 'SG' || github.event.inputs.region == 'ALL'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 安装 CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: SG | 确定 CF API 端点和应用程序名称 (APP_NAME)
      run: |
        CF_API="https://api.cf.ap21.hana.ondemand.com"
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        DEFAULT_APP_NAME="sg$RANDOM_STR"

        APP_NAME=""
        # 如果用户提供了app_name，则为其添加区域后缀 -sg
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ github.event.inputs.app_name }}-sg"
        else
          APP_NAME="$DEFAULT_APP_NAME"
        fi
        
        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: SG | 登录到 SAP Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        # 获取组织列表
        ORG=$(cf orgs | sed -n '4p')
        echo "Selected org: $ORG"
        echo "ORG=$ORG" >> $GITHUB_ENV

        # 获取空间列表
        SPACE=$(cf spaces | sed -n '4p')
        echo "Selected space: $SPACE"
        echo "SPACE=$SPACE" >> $GITHUB_ENV

        # 使用获取的组织和空间重新登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: SG | 部署应用
      run: |
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k ${{ env.DISK }} --health-check-type port; then
          echo "SG区域部署成功！"
        else
          cf delete ${{ env.APP_NAME }} -f -r
          echo "伙计,没资源了,部署失败,请明天早上8:20至9:00再尝试部署,已清理失败部署残留"
          exit 1
        fi

    - name: SG | 设置环境变量
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        
        # 新加坡区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_SG }}"
        
    - name: SG | 验证应用部署状态和基本信息
      run: |
        # 强制应用重启/重构，以应用环境变量
        cf restage ${{ env.APP_NAME }}

        # 检查应用状态
        STATUS=$(cf app ${{ env.APP_NAME }} | grep "requested state:" | awk '{print $3}')
        if [ "$STATUS" != "started" ]; then
          echo "❌ 应用启动失败，当前状态: $STATUS"
          echo "查看应用日志:"
          cf logs ${{ env.APP_NAME }} --recent
          exit 1
        fi

        echo "🚀 部署完成！详细信息如下："
        echo "区域(Region): ${{ github.event.inputs.region }}"
        echo "区域API: ${{ env.CF_API }}"
        echo "组织(ORG): ${{ env.ORG }}"
        echo "空间(SPACE): ${{ env.SPACE }}"
        echo "应用名称(App Name): ${{ env.APP_NAME }}"
        echo "部署镜像: ${{ env.DOCKER_IMAGE }}"
        echo "内存容量: ${{ env.MEMORY }}"
        echo "磁盘容量: ${{ env.DISK }}"

        # 获取应用路由
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL (APP_URL): https://$ROUTE"
        else
          echo "⚠️ 未找到应用路由，请检查部署状态。"
        fi

  # 美国区域的部署任务
  deploy_us:
    if: github.event.inputs.region == 'US' || github.event.inputs.region == 'ALL'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 安装 CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: US | 确定 CF API 端点和应用程序名称 (APP_NAME)
      run: |
        CF_API="https://api.cf.us10-001.hana.ondemand.com"
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        DEFAULT_APP_NAME="us$RANDOM_STR"

        APP_NAME=""
        # 关键改动：如果用户提供了app_name，则为其添加区域后缀 -us
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ github.event.inputs.app_name }}-us"
        else
          APP_NAME="$DEFAULT_APP_NAME"
        fi
        
        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: US | 登录到 SAP Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        # 获取组织列表
        ORG=$(cf orgs | sed -n '4p')
        echo "Selected org: $ORG"
        echo "ORG=$ORG" >> $GITHUB_ENV

        # 获取空间列表
        SPACE=$(cf spaces | sed -n '4p')
        echo "Selected space: $SPACE"
        echo "SPACE=$SPACE" >> $GITHUB_ENV

        # 使用获取的组织和空间重新登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: US | 部署应用
      run: |
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k ${{ env.DISK }} --health-check-type port; then
          echo "US区域部署成功！"
        else
          cf delete ${{ env.APP_NAME }} -f -r
          echo "伙计,没资源了,部署失败,请明天早上8:20至9:00再尝试部署,已清理失败部署残留"
          exit 1
        fi

    - name: US | 设置环境变量
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 美国区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_US }}"

    - name: US | 验证应用部署状态和基本信息
      run: |
        # 强制应用重启/重构，以应用环境变量
        cf restage ${{ env.APP_NAME }}

        # 检查应用状态
        STATUS=$(cf app ${{ env.APP_NAME }} | grep "requested state:" | awk '{print $3}')
        if [ "$STATUS" != "started" ]; then
          echo "❌ 应用启动失败，当前状态: $STATUS"
          echo "查看应用日志:"
          cf logs ${{ env.APP_NAME }} --recent
          exit 1
        fi
     
        echo "🚀 部署完成！详细信息如下："
        echo "区域(Region): ${{ github.event.inputs.region }}"
        echo "区域API: ${{ env.CF_API }}"
        echo "组织(ORG): ${{ env.ORG }}"
        echo "空间(SPACE): ${{ env.SPACE }}"
        echo "应用名称(App Name): ${{ env.APP_NAME }}"
        echo "部署镜像: ${{ env.DOCKER_IMAGE }}"
        echo "内存容量: ${{ env.MEMORY }}"
        echo "磁盘容量: ${{ env.DISK }}"

        # 获取应用路由
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL (APP_URL): https://$ROUTE"
        else
          echo "⚠️ 未找到应用路由，请检查部署状态。"
        fi
