name: 自动部署 SAP all

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG  # 新加坡
          - US  # 美国
          - ALL # 新加坡+美国
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  DOCKER_IMAGE: ghcr.io/eooce/nodejs:main
  MEMORY: 512M

jobs:
  # 新加坡区域的部署任务
  deploy_sg:
    # 设置任务执行条件
    if: github.event.inputs.region == 'SG' || github.event.inputs.region == 'ALL'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: SG | Determine CF API endpoint and app name
      run: |
        CF_API="https://api.cf.ap21.hana.ondemand.com"
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        DEFAULT_APP_NAME="sg$RANDOM_STR"

        APP_NAME=""
        # 关键改动：如果用户提供了app_name，则为其添加区域后缀 -sg
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ github.event.inputs.app_name }}-sg"
        else
          APP_NAME="$DEFAULT_APP_NAME"
        fi
        
        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: SG | Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.SG_ORG }}" -s "${{ secrets.SG_SPACE }}"

    - name: SG | Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: SG | Set environment variables
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        
        # 新加坡区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_SG }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_SG }}"

    - name: SG | Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: SG | Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "SG Deployment completed successfully!"

  # 美国区域的部署任务
  deploy_us:
    # 设置任务执行条件
    if: github.event.inputs.region == 'US' || github.event.inputs.region == 'ALL'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: US | Determine CF API endpoint and app name
      run: |
        CF_API="https://api.cf.us10-001.hana.ondemand.com"
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        DEFAULT_APP_NAME="us$RANDOM_STR"

        APP_NAME=""
        # 关键改动：如果用户提供了app_name，则为其添加区域后缀 -us
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          APP_NAME="${{ github.event.inputs.app_name }}-us"
        else
          APP_NAME="$DEFAULT_APP_NAME"
        fi
        
        echo "CF_API=$CF_API" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"

    - name: US | Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "${{ secrets.US_ORG }}" -s "${{ secrets.US_SPACE }}"

    - name: US | Deploy application
      run: |
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port

    - name: US | Set environment variables
      run: |
        # 通用环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 美国区域特定变量
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN_US }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH_US }}"

    - name: US | Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: US | Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "US Deployment completed successfully!"
