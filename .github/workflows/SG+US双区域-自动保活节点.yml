name: SG+US双区域-自动保活节点

on:
  workflow_dispatch:  # 手动触发
    inputs:
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG    # 新加坡
          - US    # 美国
          - ALL   # 新加坡+美国

  repository_dispatch:
    types: [service-down-alert]

jobs:
  restart-apps-by-region:
    runs-on: ubuntu-latest
    name: Restart ${{ matrix.region_code }} Apps

    strategy:
      fail-fast: false
      matrix:
        include:
          - region_code: SG
            cf_api: https://api.cf.ap21.hana.ondemand.com
          - region_code: US
            cf_api: https://api.cf.us10-001.hana.ondemand.com

    if: |
      (github.event_name == 'repository_dispatch') ||
      (github.event.inputs.region == 'ALL') ||
      (github.event.inputs.region == matrix.region_code)

    steps:
      - name: Check Trigger Event
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "触发事件类型 (Event Type): ${{ github.event.action }}"
            echo "收到来自 Uptime Kuma 的下线通知，开始执行自动恢复部署流程..."
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "工作流被手动触发，开始执行部署..."
          else
            echo "工作流由计划任务触发，开始执行部署..."
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CF CLI
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli

      - name: Determine CF API endpoint
        run: |
          echo "CF_API=${{ matrix.cf_api }}" >> $GITHUB_ENV
          echo "使用API端点: ${{ matrix.cf_api }} (区域: ${{ matrix.region_code }})"

      - name: Login to Cloud Foundry
        run: |
          # 登录以获取组织列表
          cf login -a "${{ env.CF_API }}" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
          
          # 获取组织列表
          ORG=$(cf orgs | sed -n '4p')
          echo "Selected org: $ORG"
          echo "ORG=$ORG" >> $GITHUB_ENV

          # 获取空间列表
          SPACE=$(cf spaces | sed -n '4p')
          echo "Selected space: $SPACE"
          echo "SPACE=$SPACE" >> $GITHUB_ENV

          # 使用获取的组织和空间重新登录
          cf login -a "${{ env.CF_API }}" -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

      - name: Get stopped applications
        id: get-apps
        run: |
          # 筛选出状态不是 "started" 的应用名称
          stopped_apps=$(cf apps | awk 'NR>3 && $2 != "started" {print $1}' | grep -v '^$')
          echo "发现需要重启的应用 (状态非 'started' 的应用):"
          echo "$stopped_apps"

          # 将多行字符串输出到 GITHUB_OUTPUT
          {
            echo "apps<<EOF"
            echo "$stopped_apps"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Restart stopped applications
        run: |
          apps="${{ steps.get-apps.outputs.apps }}"

          if [ -z "$apps" ]; then
            echo "区域 ${{ matrix.region_code }} 中未发现任何需要重启的应用 (所有应用均处于 'started' 状态)。"
            exit 0
          fi

          echo "正在重启区域 ${{ matrix.region_code }} 中的应用:"
          echo "$apps"

          for app in $apps; do
            echo "正在重启应用: $app"
            cf restart "$app"
            echo "应用 $app 重启成功"
            echo "----------------------------------------"
            sleep 20
          done

      - name: Verify applications status
        run: |
          echo "区域 ${{ matrix.region_code }} 中所有应用的最终状态:"
          cf apps
